{"version":3,"sources":["api/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["API_URL","getTodos","fetch","then","response","json","getUser","userId","TodoList","statusFilter","handleSelect","handleChange","changeStatus","todos","setUser","className","value","onChange","type","event","target","map","todo","key","id","classNames","TodoList__item","completed","readOnly","checked","onClick","title","CurrentUser","state","currentId","user","loadUser","a","props","data","clearUser","setState","componentDidMount","componentDidUpdate","this","name","email","phone","React","Component","App","selectedUserId","titleFilter","filter","handleInputChange","input","filteredByTitle","preparedTodos","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.500ccfbc.chunk.js","sourcesContent":["const API_URL = `https://mate-api.herokuapp.com`;\n\nexport const getTodos = () => (\n  fetch(`${API_URL}/todos/`)\n    .then(response => response.json())\n);\n\nexport const getUser = userId => (\n  fetch(`${API_URL}/users/${userId}/`)\n    .then(response => response.json())\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  statusFilter,\n  handleSelect,\n  handleChange,\n  changeStatus,\n  todos,\n  setUser,\n}) => (\n  <div className=\"TodoList\">\n    <select\n      value={statusFilter}\n      onChange={handleSelect}\n    >\n      <option value=\"All\">All</option>\n      <option value=\"Completed\">Completed</option>\n      <option value=\"Not completed\">Not completed</option>\n    </select>\n    <input\n      type=\"text\"\n      onChange={event => handleChange(event.target.value)}\n    />\n\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames({\n              TodoList__item: true,\n              'TodoList__item--unchecked': !todo.completed,\n              'TodoList__item--checked': todo.completed,\n            })}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                readOnly\n                checked={todo.completed}\n                onClick={() => changeStatus(todo.id)}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n              TodoList__user-button\n              TodoList__user-button--selected\n              button\n            \"\n              type=\"button\"\n              onClick={() => setUser(todo.userId)}\n            >\n              {`User #${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  statusFilter: PropTypes.string.isRequired,\n  handleSelect: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  setUser: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    currentId: 0,\n    user: {},\n  }\n\n  loadUser = async() => {\n    const user = await getUser(this.props.userId);\n\n    if (!user.data) {\n      this.props.clearUser();\n    }\n\n    this.setState({\n      user: user.data,\n      currentId: this.props.userId,\n    });\n  }\n\n  componentDidMount = () => {\n    this.loadUser();\n  }\n\n  componentDidUpdate = async() => {\n    if (this.props.userId === this.state.currentId) {\n      return;\n    }\n\n    this.loadUser();\n  }\n\n  render() {\n    const { user } = this.state;\n    const { userId, clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${userId}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          onClick={() => clearUser()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    statusFilter: 'All',\n    titleFilter: '',\n  };\n\n  componentDidMount = async() => {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: todos.data.filter(todo => todo.title && todo.id && todo.userId),\n    });\n  }\n\n  handleSelect = (event) => {\n    this.setState({\n      statusFilter: event.target.value,\n    });\n  }\n\n  handleInputChange = (input) => {\n    this.setState({\n      titleFilter: input,\n    });\n  }\n\n  setUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  changeStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === +id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return { ...todo };\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId, statusFilter, titleFilter } = this.state;\n\n    let filteredByTitle;\n\n    if (titleFilter) {\n      filteredByTitle = todos.filter(todo => (\n        todo.title && todo.title.includes(titleFilter)\n      ));\n    } else {\n      filteredByTitle = todos;\n    }\n\n    let preparedTodos;\n\n    switch (statusFilter) {\n      case 'Completed':\n        preparedTodos = filteredByTitle.filter(todo => todo.completed);\n        break;\n      case 'Not completed':\n        preparedTodos = filteredByTitle.filter(todo => !todo.completed);\n        break;\n      default:\n        preparedTodos = filteredByTitle;\n        break;\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={preparedTodos}\n            handleSelect={this.handleSelect}\n            handleChange={this.handleInputChange}\n            changeStatus={this.changeStatus}\n            statusFilter={statusFilter}\n            titleFilter={titleFilter}\n            setUser={this.setUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}