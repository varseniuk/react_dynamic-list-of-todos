{"version":3,"sources":["api/api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["API_URL","getTodos","fetch","then","response","json","getUser","userId","TodoList","statusFilter","handleSelect","handleChange","todos","setUser","className","value","onChange","event","type","target","map","todo","key","id","classNames","TodoList__item","completed","readOnly","title","onClick","CurrentUser","state","currentId","user","loadUser","a","props","data","clearUser","setState","componentDidMount","componentDidUpdate","this","name","email","phone","React","Component","App","selectedUserId","titleFilter","input","filteredByTitle","preparedTodos","filter","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7ce39ebb.chunk.js","sourcesContent":["const API_URL = `https://mate-api.herokuapp.com`;\n\nexport const getTodos = () => (\n  fetch(`${API_URL}/todos/`)\n    .then(response => response.json())\n);\n\nexport const getUser = userId => (\n  fetch(`${API_URL}/users/${userId}/`)\n    .then(response => response.json())\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport './TodoList.scss';\n\nexport const TodoList = (\n  {\n    statusFilter,\n    handleSelect,\n    handleChange,\n    todos,\n    setUser,\n  },\n) => (\n  <div className=\"TodoList\">\n    <select\n      value={statusFilter}\n      onChange={event => handleSelect(event)}\n    >\n      <option value=\"All\">All</option>\n      <option value=\"Completed\">Completed</option>\n      <option value=\"Not completed\">Not completed</option>\n    </select>\n    <input\n      type=\"text\"\n      onChange={event => handleChange(event.target.value)}\n    />\n\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames({\n              TodoList__item: true,\n              'TodoList__item--unchecked': !todo.completed,\n              'TodoList__item--checked': todo.completed,\n            })}\n          >\n            <label>\n              <input type=\"checkbox\" readOnly />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n              TodoList__user-button\n              TodoList__user-button--selected\n              button\n            \"\n              type=\"button\"\n              onClick={() => setUser(todo.userId)}\n            >\n              {`User #${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  statusFilter: PropTypes.string.isRequired,\n  handleSelect: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  setUser: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number.isRequired,\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    currentId: 0,\n    user: {},\n  }\n\n  loadUser = async() => {\n    const user = await getUser(this.props.userId);\n\n    if (!user.data) {\n      this.props.clearUser();\n    }\n\n    this.setState({\n      user: user.data,\n      currentId: this.props.userId,\n    });\n  }\n\n  componentDidMount = () => {\n    this.loadUser();\n  }\n\n  componentDidUpdate = async() => {\n    if (this.props.userId === this.state.currentId) {\n      return;\n    }\n\n    this.loadUser();\n  }\n\n  render() {\n    const { user } = this.state;\n    const { userId, clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${userId}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button type=\"button\" onClick={() => clearUser()}>Clear</button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    statusFilter: 'All',\n    titleFilter: '',\n  };\n\n  componentDidMount = async() => {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: todos.data,\n    });\n  }\n\n  handleSelect = (event) => {\n    this.setState({\n      statusFilter: event.target.value,\n    });\n  }\n\n  handleChange = (input) => {\n    this.setState({\n      titleFilter: input,\n    });\n  }\n\n  setUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId, statusFilter, titleFilter } = this.state;\n\n    let filteredByTitle;\n\n    if (titleFilter) {\n      filteredByTitle = todos.filter(todo => (\n        todo.title && todo.title.includes(titleFilter)\n      ));\n    } else {\n      filteredByTitle = todos;\n    }\n\n    let preparedTodos;\n\n    switch (statusFilter) {\n      case 'Completed':\n        preparedTodos = filteredByTitle.filter(todo => todo.completed);\n        break;\n      case 'Not completed':\n        preparedTodos = filteredByTitle.filter(todo => !todo.completed);\n        break;\n      default:\n        preparedTodos = filteredByTitle;\n        break;\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={preparedTodos}\n            handleSelect={this.handleSelect}\n            handleChange={this.handleChange}\n            statusFilter={this.state.statusFilter}\n            titleFilter={this.state.titleFilter}\n            setUser={this.setUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}